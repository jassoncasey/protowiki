def ofp : namespace {

def Version : type = enum(nat(8)) {
  OFP_1_1 = 2
}

def v1_1 : namespace {

def Type : type = enum(nat(8)) {
  HELLO = 0, ERROR = 1, ECHO_REQ = 2, ECHO_RES = 3, EXPERIMENTER = 4,
  FEATURE_REQ = 5, FEATURE_RES = 6, GET_CONFIG_REQ = 7, GET_CONFIG_RES = 8,
  SET_CONFIG = 9, PACKET_IN = 10, FLOW_REMOVED = 11, PORT_STATUS = 12,
  PACKET_OUT = 13, FLOW_MOD = 14, GROUP_MOD = 15, PORT_MOD = 16, TABLE_MOD = 17
  STATS_REQ = 18, STATS_RES = 19, BARRIER_REQ = 20, BARRIER_RES = 21,
  QUEUE_GET_CONFIG_REQ = 22, QUEUE_GET_CONFIG_RES = 23
}

def Hello : type = record {
  data : vector(nat(8));
}

ErrorType : type = enum(nat(16,msbf)) {
  HELLO_FAILED         = 0,
  BAD_REQUEST          = 1,
  BAD_ACTION           = 2,
  BAD_INSTRUCTION      = 3,
  BAD_MATCH            = 4,
  FLOW_MOD_FAILED      = 5,
  GROUP_MOD_FAILED     = 6,
  PORT_MOD_FAILED      = 7,
  TABLE_MOD_FAILED     = 8,
  QUEUE_OP_FAILED      = 9,
  SWITCH_CONFIG_FAILED = 10
}

HelloFailedCode : type = enum(nat(16,msbf)) {
  INCOMPATIBLE = 0,
  EPERM        = 1  
}

BadRequestCode : type = enum(nat(16,msbf)) {
  BAD_VERSION      = 0,
  BAD_TYPE         = 1,
  BAD_STAT         = 2,
  BAD_EXPERIMENTER = 3,
  BAD_SUB_TYPE     = 4,
  EPERM            = 5,
  BAD_LENGTH       = 6,
  BUFFER_EMPTY     = 7,
  BUFFER_UNKNOWN   = 8,
  BAD_TABLE_ID     = 9
}

BadActionCode : type = enum(nat(16,msbf)) {
  BAD_TYPE              = 0,
  BAD_LENGTH            = 1,
  BAD_EXPERIMENTER      = 2,
  BAD_EXPERIMENTER_TYPE = 3,
  BAD_OUT_PORT          = 4,
  BAD_ARGUMENT          = 5,
  EPERM                 = 6,
  TOO_MANY              = 7,
  BAD_QUEUE             = 8,
  BAD_OUT_GROUP         = 9,
  MATCH_INCONSISTENT    = 10,
  UNSUPPORTED_ORDER     = 11,
  BAD_TAG               = 12
}

BadInstructionCode : type = enum(nat(16,msbf)) {
  UNKNOWN_INST        = 0,
  UNSUP_INST          = 1,
  BAD_TABLE_ID        = 2,
  UNSUP_METADATA      = 3,
  UNSUP_METADATA_MASK = 4,
  UNSUP_EXP_LIST      = 5
}

BadMatch : type = enum(nat(16,msbf)) {
  BAD_TYPE         = 0,
  BAD_LEN          = 1,
  BAD_TAG          = 2,
  BAD_DL_ADDR_MASK = 3,
  BAD_HW_ADDR_MASK = 4,
  BAD_WILDCARDS    = 5,
  BAD_FIELD        = 6,
  BAD_VALUE        = 7
}

FlowModFailedCode : type = enum(nat(16,msbf)) {
  UNKNOWN      = 0,
  TABLE_FULL   = 1,
  BAD_TABLE_ID = 2,
  OVERLAP      = 3,
  EPERM        = 4,
  BAD_TIMEOUT  = 5,
  BAD_COMMAND  = 6
}

GroupModFailedCode : type = enum(nat(16,msbf)) {
  GROUP_EXISTS         = 0,
  INVALID_GROUP        = 1,
  WEIGHT_UNSUPPORTED   = 2,
  OUT_OF_GROUPS        = 3,
  OUT_OF_BUCKETS       = 4,
  CHAINING_UNSUPPORTED = 5,
  WATCH_UNSUPPORTED    = 6,
  LOOP                 = 7,
  UNKNOWN_GROUP        = 8
}

PortModFailedCode : type = enum(nat(16,msbf)) {
  BAD_PORT      = 0,
  BAD_HW_ADDR   = 1,
  BAD_CONFIG    = 2,
  BAD_ADVERTISE = 3
}

TableModFailedCode : type = enum(nat(16,msbf)) {
  BAD_TABLE  = 0,
  BAD_CONFIG = 1
}

QueueOpFailedCode : type = enum(nat(16,msbf)) {
  BAD_PORT  = 0,
  BAD_QUEUE = 1,
  EPERM     = 2
}

SwitchConfigFailedCode : type = enum(nat(16,msbf)) {
  BAD_FLAGS = 0,
  BAD_LEN   = 1
}

def ErrorCode(t:ErrorType):type = variant {
  HelloFailedCode        if t == HELLO_FAILED;
  BadRequestCode         if t == BAD_REQUEST;
  BadActionCode          if t == BAD_ACTION;
  BadInstructionCode     if t == BAD_INSTRUCTION;
  BadMatch               if t == BAD_MATCH;     
  FlowModFailedCode      if t == FLOW_MOD_FAILED;
  GroupModFailedCode     if t == GROUP_MOD_FAILED;
  PortModFailedCode      if t == PORT_MOD_FAILED;
  TableModFailedCode     if t == TABLE_MOD_FAILED;
  QueueOpFailedCode      if t == QUEUE_OP_FAILED;
  SwitchConfigFailedCode if t == SWITCH_CONFIG_FAILED;
}

def Error : type = record {
  type : ErrorType;
  code : ErrorCode;
}

def EchoReq : type = record {
  data : vector(nat(8));
}

def EchoRes : type = record {
  data : vector(nat(8));
}

def Experimenter : type = record {
  id : nat(32,msbf);
  data : vector(nat(8));
}

def FeatureReq : type = record {}

def FeatureCapabilities : type = enum(nat(32,msbf)) {
  0..255,
  FLOW_STATS   = 1,
  TABLE_STATS  = 2,
  PORT_STATS   = 4,
  GROUP_STATS  = 8,
  IP_REASM     = 32,
  QUEUE_STATS  = 64,
  ARP_MATCH_IP = 128
}

def Port : type = record {}

def FeatureRes : type = record {
  datapath-id  : nat(64,msbf);
  n_buffers    : nat(32,msbf);
  n_tables     : nat(8);
               : nat(24);
  capabilities : FeatureCapabilities;
  reserved     : nat(32,msbf);
  ports        : vector(Port);
}

def GetConfigReq : type = record {}

def ConfigFlags : type = enum(nat(16,msbf)) {
  FRAG_NORMAL = 0,
  FRAG_DROP   = 1,
  FRAG_REASM  = 1 << 1,
  FRAG_MASK   = 3,
}

def GetConfigRes : type = record {
  flags : ConfigFlags;
  miss_send_len : nat(16,msbf);
}

def SetConfig : type = record {
  flags : ConfigFlags;
  miss_send_len : nat(16,msbf);
}

def PacketIn : type = record {}


def FlowRemoved : type = record {}
def PortStatus : type = record {}
def PacketOut : type = record {}
def FlowMod : type = record {}
def GroupMod : type = record {}
def PortMod : type = record {}
def TableMod : type = record {}
def StatsReq : type = record {}
def StatsRes : type = record {}

def BarrierReq : type = record {}
def BarrierRes : type = record {}

def QueueGetConfigReq : type = record {}
def QueueGetConfigRes : type = record {}

def Payload(t:Type):type = variant {
  Hello             if t == HELLO;
  Error             if t == ERROR;
  EchoReq           if t == ECHO_REQ;
  EchoRes           if t == ECHO_RES;
  Experimenter      if t == EXPERIMENTER;
  FeatureReq        if t == FEATURE_REQ;
  FeatureRes        if t == FEATURE_RES;
  GetConfigReq      if t == GET_CONFIG_REQ;
  GetConfigRes      if t == GET_CONFIG_RES;
  SetConfig         if t == SET_CONFIG;
  PacketIn          if t == PACKET_IN;
  FlowRemoved       if t == FLOW_REMOVED;
  PortStatus        if t == PORT_STATUS;
  PacketOut         if t == PACKET_OUT;
  FlowMod           if t == FLOW_MOD;
  GroupMod          if t == GROUP_MOD;
  PortMod           if t == PORT_MOD;
  TableMod          if t == TABLE_MOD;
  StatsReq          if t == STATS_REQ;
  StatsRes          if t == STATS_RES;
  BarrierReq        if t == BARRIER_REQ;
  BarrierRes        if t == BARRIER_RES;
  QueueGetConfigReq if t == QUEUE_GET_CONFIG_REQ;
  QueueGetConfigRes if t == QUEUE_GET_CONFIG_RES;
}

} // v1_1 namspace
} // ofp namespace 