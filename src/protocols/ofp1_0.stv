def ofp : namespace {

def Version : type = enum(nat(8)) {
  OFP_1_0 = 1
}

def v1_0 : namespace {

def Type : type = enum(nat(8)) {
  HELLO = 0, ERROR = 1, ECHO_REQ = 2, ECHO_RES = 3, VENDOR = 4,
  FEATURE_REQ = 5, FEATURE_RES = 6, GET_CONFIG_REQ = 7, GET_CONFIG_RES = 8,
  SET_CONFIG = 9, PACKET_IN = 10, FLOW_REMOVED = 11, PORT_STATUS = 12,
  PACKET_OUT = 13, FLOW_MOD = 14, PORT_MOD = 15,
  STATS_REQ = 16, STATS_RES = 17, BARRIER_REQ = 18, BARRIER_RES = 19,
  QUEUE_GET_CONFIG_REQ = 20, QUEUE_GET_CONFIG_RES = 21
}

def Hello : type = record {
  data : vector(nat(8));
}

def Error : type = record {

}

def EchoReq : type = record {
  data : vector(nat(8));
}

def EchoRes : type = record {
  data : vector(nat(8));
}

def Vendor : type = record {
  id : nat(32,msbf);
  data : vector(nat(8));
}

def FeatureReq : type = record {}

def FeatureCapabilities : type = enum(nat(32,msbf)) {
  FLOW_STATS   = 1,
  TABLE_STATS  = 2,
  PORT_STATS   = 4,
  STP          = 8,
  RESERVED     = 16,
  IP_REASM 	   = 32,
  QUEUE_STATS  = 64,
  ARP_MATCH_IP = 128
}

def FeatureActions : type = enum(nat(32,msbf)) {
  OUTPUT 	   = 1,
  SET_VLAN_VID = 2,
  SET_VLAN_PCP = 4,
  STRIP_VLAN   = 8,
  SET_DL_SRC   = 16,
  SET_DL_DST   = 32,
  SET_NW_SRC   = 64,
  SET_NW_DST   = 128,
  SET_NW_TOS   = 256,
  SET_TP_SRC   = 512,
  SET_TP_DST   = 1024,
  ENQUEUE	   = 2048
}

def Port : type = record {}

def FeatureRes : type = record {
  datapath-id  : nat(64,msbf);
  n_buffers    : nat(32,msbf);
  n_tables 	   : nat(8);
			   : nat(24);
  capabilities : FeatureCapabilities;
  actions 	   : FeatureActions;
  ports 	   : vector(Port);
}

def GetConfigReq : type = record {}

def ConfigFlags : type = enum(nat(16,msbf)) {
  FRAG_NORMAL = 0,
  FRAG_DROP   = 1,
  FRAG_REASM  = 2,
  FRAG_MASK   = 3
}

def GetConfigRes : type = record {
  flags         : ConfigFlags;
  miss_send_len : nat(16,msbf);
}

def SetConfig : type = record {
  flags         : ConfigFlags;
  miss_send_len : nat(16,msbf);
}

def PacketInReason : type = enum(nat(8)) {
  NO_MACTH = 0,
  ACTION   = 1
}

def PacketIn : type = record {
  buffer_id : nat(32,msbf);
  total_len : nat(16,msbf);
  in_port   : nat(16,msbf);
  reason    : PacketInReason;
			: nat(8);
  data 		: vector(nat(8));
}

def Match : type = record {}

def FlowRemovedReason : type = enum(nat(8)) {
  IDLE_TIMEOUT = 0,
  HARD_TIMEOUT = 1,
  DELETE 	   = 2
}

def FlowRemoved : type = record {
  match 		: Match;
  cookie 		: nat(64,msbf); 
  reason    	: FlowRemovedReason;
				: pad(8);
  priority 		: nat(16,msbf);
  duration_sec  : nat(32,msbf); 
  duration_nsec : nat(32,msbf);   
  idle_timeout  : nat(16,msbf);
				: pad(16);
  packet_count  : nat(64,msbf); 
  byte_count    : nat(64,msbf); 
}

def PortStatusReason : type = enum(nat(8)) {
  ADD 	 = 0,
  DELETE = 1,
  MODIFY = 2
}

def PortStatus : type = record {
  reason : PortStatusReason;
		 : pad(56);  
  port   : Port		 
}

def Action : type = record {}

def PortID : type = enum(nat(16), msbf) {
  0..65280
}

def PacketOut : type = record {
  buffer_id   : nat(32,msbf);
  in_port     : PortID;
  actions_len : nat(16,msbf);
  actions	  : vector(Action);
  data 		  : vector(nat(8));
}

def FlowModCommand : type = enum(nat(16), msbf) {
  ADD 	 		= 0,
  MODIFY 		= 1,
  MODIFY_STRICT = 2,
  DELETE 	  	= 3,
  DELETE_STRICT = 4,
}

def FlowModFlags : type = enum(nat(16), msbf) {
  SEND_FLOW_REM	= 0,
  CHECK_OVERLAP = 1,
  EMERG 		= 2,
}

def FlowMod : type = record {
  match 	   : Match;
  cookie 	   : nat(64,msbf); 
  command      : FlowModCommand;
  idle_timeout : nat(16,msbf);
  hard_timeout : nat(16,msbf);
  priority 	   : nat(16,msbf); 
  buffer_id    : nat(32,msbf);
  out_port 	   : nat(16,msbf);
  flags 	   : FlowModFlags;
  actions	   : vector(Action);	
}

def PortMod : type = record {}

def StatsReq : type = record {}
def StatsRes : type = record {}

def BarrierReq : type = record {}
def BarrierRes : type = record {}

def QueueGetConfigReq : type = record {
  port : PortID;
	   : nat(16);
}

def Queue : type = record {}

def QueueGetConfigRes : type = record {
  port   : PortID;
	     : nat(48);
  queues : vector(Queue);	   
}

def Payload(t:Type):type = variant {
  Hello             if t == HELLO;
  Error             if t == ERROR;
  EchoReq           if t == ECHO_REQ;
  EchoRes           if t == ECHO_RES;
  Vendor            if t == VENDOR;
  FeatureReq        if t == FEATURE_REQ;
  FeatureRes        if t == FEATURE_RES;
  GetConfigReq      if t == GET_CONFIG_REQ;
  GetConfigRes      if t == GET_CONFIG_RES;
  SetConfig         if t == SET_CONFIG;
  PacketIn          if t == PACKET_IN;
  FlowRemoved       if t == FLOW_REMOVED;
  PortStatus        if t == PORT_STATUS;
  PacketOut         if t == PACKET_OUT;
  FlowMod           if t == FLOW_MOD;
  PortMod           if t == PORT_MOD;
  StatsReq          if t == STATS_REQ;
  StatsRes          if t == STATS_RES;
  BarrierReq        if t == BARRIER_REQ;
  BarrierRes        if t == BARRIER_RES;
  QueueGetConfigReq if t == QUEUE_GET_CONFIG_REQ;
  QueueGetConfigRes if t == QUEUE_GET_CONFIG_RES;

}

} // v1_0 namspace
} // ofp namespace 